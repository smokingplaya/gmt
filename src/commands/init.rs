use std::{fs::{self, File}, io::Write, path::Path};
use crate::{log::{self, LogType}, FOLDER, SETTINGS_FILE};

const DEFAULT_SETTINGS: &'static str = r#"# generated by GMTool (https://github.com/autumncommunity/gmtool)
srcds_path: /home/user/steamcmd/steamapps/common/GarrysModDS # path to srcds
srcds_args: ["-map", "gm_construct"] # additional arguments to srcds"#;

pub fn on_execute() {
    let path = Path::new(FOLDER);

    let full_path = format!("{}\\{}", FOLDER, SETTINGS_FILE);
    let settings = Path::new(&full_path);

    if !path.exists() || !path.is_dir() {
        let _ = fs::create_dir(FOLDER);

        return create_settings(settings);
    }

    if settings.exists() && settings.is_file() {
        return log::print(LogType::Error, &format!("File {SETTINGS_FILE} already exists!"));
    }

    create_settings(settings);
}

fn create_settings(path: &Path) {
    match File::create(path) {
        Ok(mut file) => {
            let _ = file.write(DEFAULT_SETTINGS.as_bytes());
        },

        Err(err) => log::print(LogType::Error, &format!("Unable to create {SETTINGS_FILE}: {}", err.to_string()))
    }

    log::print(LogType::Info, &format!("Generated {SETTINGS_FILE}"));
}